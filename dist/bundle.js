(()=>{"use strict";var t={344:(t,e,n)=>{n.d(e,{c:()=>o});var r=n(648),a=n.n(r),i=n(312),s=n.n(i)()(a());s.push([t.id,".container {\n    display: flex;\n    flex-direction: column;\n    align-items: center; \n}\n\n.container > h1 {\n    margin: 20px 0; \n}\n\n.gameContent {\n    display: flex;\n    justify-content: space-around;\n    margin-top: 20px; \n}\n\n.playerBoardDisplay {\n    display: grid; \n    grid-template-columns: repeat(10, 1fr); \n    grid-template-rows: repeat(10, 1fr); \n    gap: 1px;\n    width: 520px;\n    height: 520px; \n    border: 1px solid black; \n}\n\n.playerDisplayTile {\n    width: calc(100% / 10); \n    height: calc(100% / 10); \n    background-color: lightblue;\n}\n\n.boardContainer {\n    margin: 20px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    display: inline-block;\n  }\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,cAAc;AAClB;;AAEA;IACI,aAAa;IACb,6BAA6B;IAC7B,gBAAgB;AACpB;;AAEA;IACI,aAAa;IACb,sCAAsC;IACtC,mCAAmC;IACnC,QAAQ;IACR,YAAY;IACZ,aAAa;IACb,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;IACtB,uBAAuB;IACvB,2BAA2B;AAC/B;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,qBAAqB;EACvB",sourcesContent:[".container {\n    display: flex;\n    flex-direction: column;\n    align-items: center; \n}\n\n.container > h1 {\n    margin: 20px 0; \n}\n\n.gameContent {\n    display: flex;\n    justify-content: space-around;\n    margin-top: 20px; \n}\n\n.playerBoardDisplay {\n    display: grid; \n    grid-template-columns: repeat(10, 1fr); \n    grid-template-rows: repeat(10, 1fr); \n    gap: 1px;\n    width: 520px;\n    height: 520px; \n    border: 1px solid black; \n}\n\n.playerDisplayTile {\n    width: calc(100% / 10); \n    height: calc(100% / 10); \n    background-color: lightblue;\n}\n\n.boardContainer {\n    margin: 20px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    display: inline-block;\n  }\n"],sourceRoot:""}]);const o=s},312:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var o=0;o<this.length;o++){var l=this[o][0];null!=l&&(s[l]=!0)}for(var c=0;c<t.length;c++){var p=[].concat(t[c]);r&&s[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),e.push(p))}},e}},648:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},596:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},s=[],o=0;o<t.length;o++){var l=t[o],c=r.base?l[0]+r.base:l[0],p=i[c]||0,d="".concat(c," ").concat(p);i[c]=p+1;var h=n(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==h)e[h].references++,e[h].updater(u);else{var m=a(u,r);r.byIndex=o,e.splice(o,0,{identifier:d,updater:m,references:1})}s.push(d)}return s}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var i=r(t=t||[],a=a||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var o=n(i[s]);e[o].references--}for(var l=r(t,a),c=0;c<i.length;c++){var p=n(i[c]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}i=l}}},176:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},808:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},120:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},520:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},936:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=class{constructor(t,e){this.shipName=t,this.shipLength=e,this.hit=0,this.sunk=!1,this.position=[]}takeHit(){return!0===this.sunk?"Ship already sunk. Can't hit again":(this.hit+=1,this.checkShip(),this.sunk?"Ship sunk!":"Hit successful!")}hits(){return this.hit}checkShip(){this.hit===this.shipLength&&(this.sunk=!0)}isSunk(){return this.sunk}},e=()=>{const t=Math.ceil(0),e=Math.floor(10);return Math.floor(Math.random()*(e-t)+t)},r=class{constructor(){this.size=10,this.board=Array(this.size).fill().map((()=>Array(this.size).fill(null))),this.ships=[],this.allHits=[]}checkBoard(){return this.board}checkShips(){return this.ships}shipPosition(t){const e=this.ships[t];return console.log(e),e.position}takeHit(t,e){if(t<0||t>=this.size||e<0||e>=this.size)return"Invalid attack (Out of range)";if(this.allHits.some((n=>n.x===t&&n.y===e)))return"Invalid attack (already attacked this tile)";this.allHits.push({x:t,y:e});const n=this.ships.find((n=>n.position.some((n=>n.x===t&&n.y===e))));return n?(n.takeHit(),this.board[t][e]="hit","Hit!"):(this.board[t][e]="miss","Miss")}allSunk(){const t=this.ships.every((t=>t.isSunk()));return!0===t}randomAttack(){const t=[e(),e()],n=t[0],r=t[1];(n<0||n>=this.size||r<0||r>=this.size)&&this.randomAttack(),this.allHits.some((t=>t.x===n&&t.y===r))&&this.randomAttack(),this.allHits.push({x:n,y:r});const a=this.ships.find((t=>t.position.some((t=>t.x===n&&t.y===r))));return console.log(a),a?(a.takeHit(),this.board[n][r]="hit","Hit!"):(this.board[n][r]="miss","Miss")}placeShip(e,n,r,a,i){for(let t=0;t<n;t++)if("horizontal"===r){if(i+t>=this.size||null!==this.board[a][i+t]||this.isAdjacentShip(a,i+t))return!1}else if("vertical"===r&&(a+t>=this.size||null!==this.board[a+t][i]||this.isAdjacentShip(a+t,i)))return!1;const s=new t(e,n);s.position=[];for(let t=0;t<n;t++)"horizontal"===r?(this.board[a][i+t]="ship",s.position.push({x:a,y:i+t})):(this.board[a+t][i]="ship",s.position.push({x:a+t,y:i}));return this.ships.push(s),!0}isAdjacentShip(t,e){for(let n=-1;n<=1;n++)for(let r=-1;r<=1;r++){if(0===n&&0===r)continue;const a=t+n,i=e+r;if(a>=0&&a<this.size&&i>=0&&i<this.size&&"ship"===this.board[a][i])return!0}return!1}placeShipRandom(){this.resetBoardAndShips();const t=["Carrier","Battleship","Cruiser","Submarine","Destroyer"],e=[5,4,3,3,2],n=["horizontal","vertical"];for(let r=0;r<t.length;r++){let a=!1;for(;!a;){const i=t[r],s=e[r],o=n[Math.floor(2*Math.random())],l=Math.floor(Math.random()*this.size),c=Math.floor(Math.random()*this.size);this.placeShip(i,s,o,l,c)&&(a=!0)}}}resetBoardAndShips(){this.board=Array(this.size).fill().map((()=>Array(this.size).fill(null))),this.ships=[],this.allHits=[]}},a=class{constructor(t="computer"){this.playerName=t,this.playerBoard=new r}hit(t,e){this.playerBoard.takeHit(t,e)}randomHit(){this.playerBoard.randomAttack()}hasLost(){return this.playerBoard.allSunk()}placeShip(){this.playerBoard.placeShipRandom()}showBoard(){return this.playerBoard.checkBoard()}};var i=n(596),s=n.n(i),o=n(520),l=n.n(o),c=n(176),p=n.n(c),d=n(120),h=n.n(d),u=n(808),m=n.n(u),y=n(936),f=n.n(y),A=n(344),v={};v.styleTagTransform=f(),v.setAttributes=h(),v.insert=p().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=m(),s()(A.c,v),A.c&&A.c.locals&&A.c.locals,(()=>{const t=(()=>{const t=prompt("whats your name?"),e=new a(t),n=new a;let r=e;return{switchPlayer:()=>{r===e?r=n:r===n&&(r=e)},player1Board:()=>e.showBoard(),player2Board:()=>n.showBoard(),player1BoardHit:(t,n)=>{e.hit(t,n)},player2BoardHit:(t,e)=>{n.hit(t,e)},playRoundVSComputer:(t,r)=>{n.hit(t,r),e.randomHit()},player1Win:()=>n.hasLost(),player2Win:()=>e.hasLost(),player1PlaceShips:()=>{e.placeShip()},player2PlaceShips:()=>{n.placeShip()},player1Name:()=>e.playerName,player2Name:()=>n.playerName}})(),e=document.querySelector(".container"),n=document.createElement("div");n.classList.add("gameContent"),e.appendChild(n);const r=(t,e,n=!1)=>{const r=document.createElement("div");r.classList.add("boardContainer");const a=document.createElement("div"),i=document.createElement("h2");return i.textContent=`Player ${e} Board`,a.className=`playerBoardDisplay player${e}BoardDisplay`,t.forEach(((t,r)=>{t.forEach(((t,i)=>{const s=document.createElement("div");s.className=`displayTile player${e}DisplayTile`,s.dataset.index=`${r},${i}`,s.dataset.player=e,s.style.backgroundColor=n?"hit"===t?"red":"miss"===t?"orange":"lightblue":"ship"===t?"green":"hit"===t?"red":"miss"===t?"orange":"lightblue",a.appendChild(s)}))})),r.appendChild(i),r.appendChild(a),r},i=(e=!1)=>{n.textContent="";const a=t.player1Board(),i=r(a,1,!1),o=t.player2Board(),l=r(o,2,!0);n.appendChild(i),n.appendChild(l),e||document.querySelectorAll(".player2DisplayTile").forEach((t=>{"red"===t.style.backgroundColor||"orange"===t.style.backgroundColor||t.classList.contains("hasEventListener")||(t.addEventListener("click",s),t.classList.add("hasEventListener"))}))},s=e=>{const[n,r]=e.target.dataset.index.split(",").map(Number),{player:a}=e.target.dataset;if("2"===a){t.playRoundVSComputer(n,r);const e=t.player1Win(),a=t.player2Win();e||a?o(e):i()}},o=t=>{i(!0),document.querySelectorAll(".player2DisplayTile.hasEventListener").forEach((t=>{t.removeEventListener("click",s),t.classList.remove("hasEventListener")}));const e=t?"Player 1":"Player 2",n=document.createElement("div");n.classList.add("winMessage"),n.textContent=`${e} Wins!`,document.body.appendChild(n)},l=document.createElement("button");l.textContent="Place Ships",e.appendChild(l);const c=document.createElement("button");c.textContent="Play Game",c.addEventListener("click",(()=>{t.player2PlaceShips(),i(),e.removeChild(c),e.removeChild(l)})),l.addEventListener("click",(()=>{t.player1PlaceShips(),e.appendChild(c),i()})),i()})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,