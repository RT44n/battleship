(()=>{"use strict";const i=class{constructor(i,s){this.shipName=i,this.shipLength=s,this.hit=0,this.sunk=!1,this.position=[]}takeHit(){return!0===this.sunk?"Ship already sunk. Can't hit again":(this.hit+=1,this.checkShip(),this.sunk?"Ship sunk!":"Hit successful!")}hits(){return this.hit}checkShip(){this.hit===this.shipLength&&(this.sunk=!0)}isSunk(){return this.sunk}},s=new class{constructor(){this.size=10,this.board=Array(this.size).fill().map((()=>Array(this.size).fill(null))),this.ships=[],this.allHits=[]}checkBoard(){console.log(this.board)}checkShips(){return this.ships}shipPosition(i){const s=this.ships[i];return console.log(s),s.position}takeHit(i,s){if(i<0||i>=this.size||s<0||s>=this.size)return"Invalid attack (Out of range)";if(this.allHits.some((t=>t.x===i&&t.y===s)))return"Invalid attack (already attacked this tile)";this.allHits.push({x:i,y:s});const t=this.ships.find((t=>t.position.some((t=>t.x===i&&t.y===s))));return console.log(t),t?(t.takeHit(),this.board[i][s]="hit","Hit!"):(this.board[i][s]="miss","Miss")}allSunk(){const i=this.ships.every((i=>i.isSunk()));return!0===i}placeShip(s,t,h,e,o){for(let i=0;i<t;i++)if("horizontal"===h){if(o+i>=this.size||null!==this.board[e][o+i])return!1}else if("vertical"===h&&(e+i>=this.size||null!==this.board[e+i][o]))return!1;const n=new i(s,t);n.position=[];for(let i=0;i<t;i++)"horizontal"===h?(this.board[e][o+i]=n.shipName,n.position.push({x:e,y:o+i})):(this.board[e+i][o]=n.shipName,n.position.push({x:e+i,y:o}));return this.ships.push(n),!0}};s.placeShip("Submarine",5,"horizontal",4,5),s.checkBoard(),s.takeHit(4,5),console.log(s.allSunk()),s.takeHit(4,9),console.log(s.allSunk()),s.takeHit(4,6),console.log(s.allSunk()),s.takeHit(4,7),s.takeHit(4,8),s.takeHit(4,5),console.log(s.allSunk())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJZSxFQUFHZCxPQU10QyxPQUZBeEIsS0FBS2MsTUFBTVksS0FBS2EsSUFFVCxDQUNULEdEOUVGL0IsRUFBUzBCLFVBQVUsWUFBYSxFQUFHLGFBQWMsRUFBRyxHQUVwRDFCLEVBQVNRLGFBQ1RSLEVBQVNKLFFBQVEsRUFBRyxHQUNwQmEsUUFBUUMsSUFBSVYsRUFBU3VCLFdBRXJCdkIsRUFBU0osUUFBUSxFQUFHLEdBQ3BCYSxRQUFRQyxJQUFJVixFQUFTdUIsV0FFckJ2QixFQUFTSixRQUFRLEVBQUcsR0FDcEJhLFFBQVFDLElBQUlWLEVBQVN1QixXQUVyQnZCLEVBQVNKLFFBQVEsRUFBRyxHQUNwQkksRUFBU0osUUFBUSxFQUFHLEdBQ3BCSSxFQUFTSixRQUFRLEVBQUcsR0FDcEJhLFFBQVFDLElBQUlWLEVBQVN1QixVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lYm9hcmQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU2hpcCB7XG4gIGNvbnN0cnVjdG9yKHNoaXBOYW1lLCBzaGlwTGVuZ3RoKSB7XG4gICAgdGhpcy5zaGlwTmFtZSA9IHNoaXBOYW1lO1xuICAgIHRoaXMuc2hpcExlbmd0aCA9IHNoaXBMZW5ndGg7XG4gICAgdGhpcy5oaXQgPSAwO1xuICAgIHRoaXMuc3VuayA9IGZhbHNlO1xuICAgIHRoaXMucG9zaXRpb24gPSBbXTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICB0YWtlSGl0KCkge1xuICAgIGlmICh0aGlzLnN1bmsgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBcIlNoaXAgYWxyZWFkeSBzdW5rLiBDYW4ndCBoaXQgYWdhaW5cIjtcbiAgICB9XG4gICAgdGhpcy5oaXQgKz0gMTtcbiAgICB0aGlzLmNoZWNrU2hpcCgpO1xuICAgIHJldHVybiB0aGlzLnN1bmsgPyBcIlNoaXAgc3VuayFcIiA6IFwiSGl0IHN1Y2Nlc3NmdWwhXCI7XG4gIH1cblxuICBoaXRzKCkge1xuICAgIHJldHVybiB0aGlzLmhpdDtcbiAgfVxuXG4gIGNoZWNrU2hpcCgpIHtcbiAgICBpZiAodGhpcy5oaXQgPT09IHRoaXMuc2hpcExlbmd0aCkge1xuICAgICAgdGhpcy5zdW5rID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpc1N1bmsoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3VuaztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaGlwO1xuIiwiaW1wb3J0IEdhbWVib2FyZCBmcm9tIFwiLi9nYW1lYm9hcmRcIjtcblxuY29uc3QgbmV3Qm9hcmQgPSBuZXcgR2FtZWJvYXJkKCk7XG5uZXdCb2FyZC5wbGFjZVNoaXAoXCJTdWJtYXJpbmVcIiwgNSwgXCJob3Jpem9udGFsXCIsIDQsIDUpO1xuXG5uZXdCb2FyZC5jaGVja0JvYXJkKCk7XG5uZXdCb2FyZC50YWtlSGl0KDQsIDUpO1xuY29uc29sZS5sb2cobmV3Qm9hcmQuYWxsU3VuaygpKTtcblxubmV3Qm9hcmQudGFrZUhpdCg0LCA5KTtcbmNvbnNvbGUubG9nKG5ld0JvYXJkLmFsbFN1bmsoKSk7XG5cbm5ld0JvYXJkLnRha2VIaXQoNCwgNik7XG5jb25zb2xlLmxvZyhuZXdCb2FyZC5hbGxTdW5rKCkpO1xuXG5uZXdCb2FyZC50YWtlSGl0KDQsIDcpO1xubmV3Qm9hcmQudGFrZUhpdCg0LCA4KTtcbm5ld0JvYXJkLnRha2VIaXQoNCwgNSk7XG5jb25zb2xlLmxvZyhuZXdCb2FyZC5hbGxTdW5rKCkpO1xuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vc2hpcFwiO1xuXG5jbGFzcyBHYW1lYm9hcmQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNpemUgPSAxMDtcbiAgICB0aGlzLmJvYXJkID0gQXJyYXkodGhpcy5zaXplKVxuICAgICAgLmZpbGwoKVxuICAgICAgLm1hcCgoKSA9PiBBcnJheSh0aGlzLnNpemUpLmZpbGwobnVsbCkpO1xuICAgIHRoaXMuc2hpcHMgPSBbXTtcbiAgICB0aGlzLmFsbEhpdHMgPSBbXTtcbiAgfVxuXG4gIGNoZWNrQm9hcmQoKSB7XG4gICAgY29uc29sZS5sb2codGhpcy5ib2FyZCk7XG4gIH1cblxuICBjaGVja1NoaXBzKCkge1xuICAgIHJldHVybiB0aGlzLnNoaXBzO1xuICB9XG5cbiAgc2hpcFBvc2l0aW9uKGluZGV4KSB7XG4gICAgLy8gQ29ycmVjdGVkIHR5cG9cbiAgICBjb25zdCBjdXJyZW50U2hpcCA9IHRoaXMuc2hpcHNbaW5kZXhdO1xuICAgIGNvbnNvbGUubG9nKGN1cnJlbnRTaGlwKTtcbiAgICByZXR1cm4gY3VycmVudFNoaXAucG9zaXRpb247XG4gIH1cblxuICB0YWtlSGl0KHgsIHkpIHtcbiAgICBpZiAoeCA8IDAgfHwgeCA+PSB0aGlzLnNpemUgfHwgeSA8IDAgfHwgeSA+PSB0aGlzLnNpemUpXG4gICAgICByZXR1cm4gXCJJbnZhbGlkIGF0dGFjayAoT3V0IG9mIHJhbmdlKVwiO1xuXG4gICAgY29uc3QgYWxyZWFkeUhpdCA9IHRoaXMuYWxsSGl0cy5zb21lKChoaXQpID0+IGhpdC54ID09PSB4ICYmIGhpdC55ID09PSB5KTtcbiAgICBpZiAoYWxyZWFkeUhpdCkge1xuICAgICAgcmV0dXJuIFwiSW52YWxpZCBhdHRhY2sgKGFscmVhZHkgYXR0YWNrZWQgdGhpcyB0aWxlKVwiO1xuICAgIH1cblxuICAgIHRoaXMuYWxsSGl0cy5wdXNoKHsgeCwgeSB9KTtcblxuICAgIGNvbnN0IGhpdFNoaXAgPSB0aGlzLnNoaXBzLmZpbmQoKHNoaXApID0+XG4gICAgICBzaGlwLnBvc2l0aW9uLnNvbWUoKHBvcykgPT4gcG9zLnggPT09IHggJiYgcG9zLnkgPT09IHkpXG4gICAgKTtcbiAgICBjb25zb2xlLmxvZyhoaXRTaGlwKTtcbiAgICBpZiAoaGl0U2hpcCkge1xuICAgICAgaGl0U2hpcC50YWtlSGl0KCk7XG4gICAgICB0aGlzLmJvYXJkW3hdW3ldID0gXCJoaXRcIjtcbiAgICAgIHJldHVybiBcIkhpdCFcIjtcbiAgICB9XG4gICAgdGhpcy5ib2FyZFt4XVt5XSA9IFwibWlzc1wiO1xuICAgIHJldHVybiBcIk1pc3NcIjtcbiAgfVxuXG4gIGFsbFN1bmsoKSB7XG4gICAgY29uc3Qgc3RhdHVzID0gdGhpcy5zaGlwcy5ldmVyeSgoc2hpcCkgPT4gc2hpcC5pc1N1bmsoKSk7XG4gICAgaWYgKHN0YXR1cyA9PT0gdHJ1ZSkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcGxhY2VTaGlwKG5hbWUsIGxlbmd0aCwgYWxpZ25tZW50LCB4LCB5KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGFsaWdubWVudCA9PT0gXCJob3Jpem9udGFsXCIpIHtcbiAgICAgICAgaWYgKHkgKyBpID49IHRoaXMuc2l6ZSB8fCB0aGlzLmJvYXJkW3hdW3kgKyBpXSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIGlmIChhbGlnbm1lbnQgPT09IFwidmVydGljYWxcIikge1xuICAgICAgICBpZiAoeCArIGkgPj0gdGhpcy5zaXplIHx8IHRoaXMuYm9hcmRbeCArIGldW3ldICE9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmV3U2hpcCA9IG5ldyBTaGlwKG5hbWUsIGxlbmd0aCk7XG4gICAgbmV3U2hpcC5wb3NpdGlvbiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhbGlnbm1lbnQgPT09IFwiaG9yaXpvbnRhbFwiKSB7XG4gICAgICAgIHRoaXMuYm9hcmRbeF1beSArIGldID0gbmV3U2hpcC5zaGlwTmFtZTtcbiAgICAgICAgbmV3U2hpcC5wb3NpdGlvbi5wdXNoKHsgeCwgeTogeSArIGkgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJvYXJkW3ggKyBpXVt5XSA9IG5ld1NoaXAuc2hpcE5hbWU7XG4gICAgICAgIG5ld1NoaXAucG9zaXRpb24ucHVzaCh7IHg6IHggKyBpLCB5IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2hpcHMucHVzaChuZXdTaGlwKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWVib2FyZDtcbiJdLCJuYW1lcyI6WyJjb25zdHJ1Y3RvciIsInNoaXBOYW1lIiwic2hpcExlbmd0aCIsInRoaXMiLCJoaXQiLCJzdW5rIiwicG9zaXRpb24iLCJ0YWtlSGl0IiwiY2hlY2tTaGlwIiwiaGl0cyIsImlzU3VuayIsIm5ld0JvYXJkIiwic2l6ZSIsImJvYXJkIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwic2hpcHMiLCJhbGxIaXRzIiwiY2hlY2tCb2FyZCIsImNvbnNvbGUiLCJsb2ciLCJjaGVja1NoaXBzIiwic2hpcFBvc2l0aW9uIiwiaW5kZXgiLCJjdXJyZW50U2hpcCIsIngiLCJ5Iiwic29tZSIsInB1c2giLCJoaXRTaGlwIiwiZmluZCIsInNoaXAiLCJwb3MiLCJhbGxTdW5rIiwic3RhdHVzIiwiZXZlcnkiLCJwbGFjZVNoaXAiLCJuYW1lIiwibGVuZ3RoIiwiYWxpZ25tZW50IiwiaSIsIm5ld1NoaXAiXSwic291cmNlUm9vdCI6IiJ9